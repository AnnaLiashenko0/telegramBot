import os
import random
import asyncio
import json
from dotenv import load_dotenv
from telegram import (
    Update,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    ReplyKeyboardMarkup
)
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    ContextTypes,
    MessageHandler,
    CallbackQueryHandler,
    filters
)
from localization import gb_localization, ua_localization

# === –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ç–æ–∫–µ–Ω–∞ ===
load_dotenv("token.env")
TOKEN = os.getenv("BOT_TOKEN")
Admin_Id = {5529532494}

PHOTO_FOLDER = "photos"
PROJECTS_FILE = "projects.json"
user_ids = set()

# === –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è/–∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –ø—Ä–æ—î–∫—Ç—ñ–≤ ===
def load_projects():
    if os.path.exists(PROJECTS_FILE):
        with open(PROJECTS_FILE, 'r', encoding='utf-8') as f:
            return json.load(f)
    return {
        "shelter": {
            "title": {
                "en": "üêæ Animal Shelter Construction",
                "ua": "üêæ –ë—É–¥—ñ–≤–Ω–∏—Ü—Ç–≤–æ –ü—Ä–∏—Ç—É–ª–∫—É"
            },
            "description": {
                "en": "We are building a new shelter for stray animals in Lviv. Donations help with materials, food, and meds.",
                "ua": "–ú–∏ –±—É–¥—É—î–º–æ –Ω–æ–≤–∏–π –ø—Ä–∏—Ç—É–ª–æ–∫ –¥–ª—è –±–µ–∑–¥–æ–º–Ω–∏—Ö —Ç–≤–∞—Ä–∏–Ω —É –õ—å–≤–æ–≤—ñ. –ü–æ–∂–µ—Ä—Ç–≤–∏ –ø—ñ–¥—É—Ç—å –Ω–∞ –±—É–¥–º–∞—Ç–µ—Ä—ñ–∞–ª–∏, —ó–∂—É —Ç–∞ –ª—ñ–∫–∏."
            },
            "requisites": "IBAN: UA123456789\nCard: 1234 5678 9012 3456"
        },
        "food": {
            "title": {
                "en": "üçñ Food for Rescued Animals",
                "ua": "üçñ –á–∂–∞ –¥–ª—è —É—Ä—è—Ç–æ–≤–∞–Ω–∏—Ö —Ç–≤–∞—Ä–∏–Ω"
            },
            "description": {
                "en": "We provide daily meals for over 80 animals. Join our monthly support program!",
                "ua": "–©–æ–¥–µ–Ω–Ω–æ –≥–æ–¥—É—î–º–æ –ø–æ–Ω–∞–¥ 80 —Ç–≤–∞—Ä–∏–Ω. –î–æ–ª—É—á–∞–π—Ç–µ—Å—å –¥–æ —â–æ–º—ñ—Å—è—á–Ω–æ—ó –ø—ñ–¥—Ç—Ä–∏–º–∫–∏!"
            },
            "requisites": "PayPal: food4animals@example.com\nCard: 4321 8765 2109 6543"
        }
    }

def save_projects(projects_data):
    with open(PROJECTS_FILE, 'w', encoding='utf-8') as f:
        json.dump(projects_data, f, ensure_ascii=False, indent=4)

projects = load_projects()

# === –Ü–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∏ ===
language_menu = ReplyKeyboardMarkup(
    keyboard=[["üá¨üáß English", "üá∫üá¶ –£–∫—Ä–∞—ó–Ω—Å—å–∫–∞"]],
    resize_keyboard=True,
    one_time_keyboard=True
)

def get_main_menu(lang):
    return ReplyKeyboardMarkup(
        keyboard=[[lang["Projects"], lang["Help"], lang["Option"]]],
        resize_keyboard=True,
        one_time_keyboard=False
    )

def get_options_menu(lang):
    return ReplyKeyboardMarkup(
        keyboard=[[lang["Reset"]], [lang["BackToMenu"]]],
        resize_keyboard=True,
        one_time_keyboard=False
    )

# === –ö–æ–º–∞–Ω–¥–∏ ===
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message:
        context.user_data.clear()
        user_ids.add(update.effective_chat.id)
        await update.message.reply_text(
            "Please select your language / –ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å –º–æ–≤—É:",
            reply_markup=language_menu
        )

async def restart(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data.clear()
    await update.message.reply_text(
        "Please select your language / –ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å –º–æ–≤—É:",
        reply_markup=language_menu
    )

async def show_main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    lang = context.user_data.get("lang", gb_localization)
    text = "Choose an option:" if lang == gb_localization else "–û–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é:"
    await update.message.reply_text(text, reply_markup=get_main_menu(lang))

async def show_options_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    lang = context.user_data.get("lang", gb_localization)
    await update.message.reply_text(lang["OptionMes"], reply_markup=get_options_menu(lang))

# === –ê–¥–º—ñ–Ω-–∫–æ–º–∞–Ω–¥–∏ ===
async def admin(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id in Admin_Id:
        await update.message.reply_text(
            "üëë –ê–¥–º—ñ–Ω-–∫–æ–º–∞–Ω–¥–∏:\n"
            "/add_project - –¥–æ–¥–∞—Ç–∏ –ø—Ä–æ—î–∫—Ç\n"
            "/delete_project - –≤–∏–¥–∞–ª–∏—Ç–∏ –ø—Ä–æ—î–∫—Ç\n"
            "/list_projects - —Å–ø–∏—Å–æ–∫ –ø—Ä–æ—î–∫—Ç—ñ–≤\n"
            f"üë• –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤: {len(user_ids)}\n"
            f"üìÇ –ü—Ä–æ—î–∫—Ç—ñ–≤: {len(projects)}"
        )
    else:
        await update.message.reply_text("üö´ –í–∏ –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ñ.")

async def add_project(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id not in Admin_Id:
        await update.message.reply_text("üö´ –í–∏ –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ñ.")
        return
    
    if not context.args:
        await update.message.reply_text(
            "–í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è:\n"
            "/add_project <–∫–ª—é—á>\n\n"
            "–ü–æ—Ç—ñ–º –±–æ—Ç –∑–∞–ø—Ä–æ—Å–∏—Ç—å:\n"
            "1. –ù–∞–∑–≤—É (–∞–Ω–≥–ª—ñ–π—Å—å–∫–æ—é)\n"
            "2. –ù–∞–∑–≤—É (—É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é)\n"
            "3. –û–ø–∏—Å (–∞–Ω–≥–ª—ñ–π—Å—å–∫–æ—é)\n"
            "4. –û–ø–∏—Å (—É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é)\n"
            "5. –†–µ–∫–≤—ñ–∑–∏—Ç–∏"
        )
        return
    
    project_key = context.args[0]
    if project_key in projects:
        await update.message.reply_text("‚ùå –¶–µ–π –∫–ª—é—á –≤–∂–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è!")
        return
    
    context.user_data["adding_project"] = True
    context.user_data["project_key"] = project_key
    context.user_data["step"] = "title_en"
    
    await update.message.reply_text("–í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –ø—Ä–æ—î–∫—Ç—É –∞–Ω–≥–ª—ñ–π—Å—å–∫–æ—é:")

async def delete_project(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id not in Admin_Id:
        await update.message.reply_text("üö´ –í–∏ –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ñ.")
        return
    
    if not context.args:
        project_list = "\n".join([f"/delete_project {key}" for key in projects.keys()])
        await update.message.reply_text(
            f"–î–æ—Å—Ç—É–ø–Ω—ñ –ø—Ä–æ—î–∫—Ç–∏ –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è:\n\n{project_list}"
        )
        return
    
    project_key = context.args[0]
    if project_key in projects:
        del projects[project_key]
        save_projects(projects)
        await update.message.reply_text(f"‚úÖ –ü—Ä–æ—î–∫—Ç '{project_key}' –≤–∏–¥–∞–ª–µ–Ω–æ!")
    else:
        await update.message.reply_text("‚ùå –ü—Ä–æ—î–∫—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!")

async def list_projects(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id not in Admin_Id:
        await update.message.reply_text("üö´ –í–∏ –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ñ.")
        return
    
    if not projects:
        await update.message.reply_text("‚ÑπÔ∏è –ù–µ–º–∞—î –∂–æ–¥–Ω–æ–≥–æ –ø—Ä–æ—î–∫—Ç—É.")
        return
    
    message = "üìÇ –°–ø–∏—Å–æ–∫ –ø—Ä–æ—î–∫—Ç—ñ–≤:\n\n"
    for key, project in projects.items():
        message += f"üîπ {key}:\n"
        message += f"EN: {project['title']['en']}\n"
        message += f"UA: {project['title']['ua']}\n\n"
    
    await update.message.reply_text(message)

# === –û–±—Ä–æ–±–Ω–∏–∫ –≤–≤–æ–¥—É –¥–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è –ø—Ä–æ—î–∫—Ç—É ===
async def handle_admin_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.user_data.get("adding_project"):
        return
    
    msg = update.message.text
    project_key = context.user_data["project_key"]
    step = context.user_data["step"]
    
    if step == "title_en":
        context.user_data["title_en"] = msg
        context.user_data["step"] = "title_ua"
        await update.message.reply_text("–í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –ø—Ä–æ—î–∫—Ç—É —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é:")
    
    elif step == "title_ua":
        context.user_data["title_ua"] = msg
        context.user_data["step"] = "desc_en"
        await update.message.reply_text("–í–≤–µ–¥—ñ—Ç—å –æ–ø–∏—Å –ø—Ä–æ—î–∫—Ç—É –∞–Ω–≥–ª—ñ–π—Å—å–∫–æ—é:")
    
    elif step == "desc_en":
        context.user_data["desc_en"] = msg
        context.user_data["step"] = "desc_ua"
        await update.message.reply_text("–í–≤–µ–¥—ñ—Ç—å –æ–ø–∏—Å –ø—Ä–æ—î–∫—Ç—É —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é:")
    
    elif step == "desc_ua":
        context.user_data["desc_ua"] = msg
        context.user_data["step"] = "requisites"
        await update.message.reply_text("–í–≤–µ–¥—ñ—Ç—å —Ä–µ–∫–≤—ñ–∑–∏—Ç–∏ –¥–ª—è –¥–æ–Ω–∞—Ç—ñ–≤:")
    
    elif step == "requisites":
        projects[project_key] = {
            "title": {
                "en": context.user_data["title_en"],
                "ua": context.user_data["title_ua"]
            },
            "description": {
                "en": context.user_data["desc_en"],
                "ua": context.user_data["desc_ua"]
            },
            "requisites": msg
        }
        save_projects(projects)
        
        # –û—á–∏—â–∞—î–º–æ —Ç–∏–º—á–∞—Å–æ–≤—ñ –¥–∞–Ω—ñ
        context.user_data.pop("adding_project")
        context.user_data.pop("project_key")
        context.user_data.pop("step")
        context.user_data.pop("title_en")
        context.user_data.pop("title_ua")
        context.user_data.pop("desc_en")
        context.user_data.pop("desc_ua")
        
        await update.message.reply_text(
            f"‚úÖ –ü—Ä–æ—î–∫—Ç '{project_key}' —É—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω–æ!",
            reply_markup=get_main_menu(context.user_data.get("lang", ua_localization))
        )

# === –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è ===
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    msg = update.message.text
    chat_id = update.message.chat_id
    user_ids.add(chat_id)

    if msg == "üá¨üáß English":
        context.user_data["lang"] = gb_localization
        await update.message.reply_text(gb_localization["LocalMes"])
        await show_main_menu(update, context)
        return
    elif msg == "üá∫üá¶ –£–∫—Ä–∞—ó–Ω—Å—å–∫–∞":
        context.user_data["lang"] = ua_localization
        await update.message.reply_text(ua_localization["LocalMes"])
        await show_main_menu(update, context)
        return

    lang = context.user_data.get("lang")
    if not lang:
        await update.message.reply_text("Please select a language first / –°–ø–æ—á–∞—Ç–∫—É –æ–±–µ—Ä—ñ—Ç—å –º–æ–≤—É:")
        return

    if msg in [lang["Projects"]]:
        keyboard = [
            [InlineKeyboardButton(proj["title"]["en"] if lang == gb_localization else proj["title"]["ua"], callback_data=key)]
            for key, proj in projects.items()
        ]
        await update.message.reply_text(
            lang["ChooseProject"],
            reply_markup=InlineKeyboardMarkup(keyboard)
        )

    elif msg in [lang["Help"]]:
        await update.message.reply_text(lang["HelpMes"])

    elif msg in [lang["Option"]]:
        await show_options_menu(update, context)

    elif msg in [lang["Reset"]]:
        await restart(update, context)

    elif msg in [lang["BackToMenu"]]:
        await show_main_menu(update, context)

    else:
        await handle_admin_input(update, context)

# === –û–±—Ä–æ–±–Ω–∏–∫ –≤–∏–±–æ—Ä—É –ø—Ä–æ—î–∫—Ç—É ===
async def handle_project_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    lang = context.user_data.get("lang", gb_localization)
    data = query.data
    if data in projects:
        proj = projects[data]
        title = proj["title"]["en"] if lang == gb_localization else proj["title"]["ua"]
        desc = proj["description"]["en"] if lang == gb_localization else proj["description"]["ua"]
        reqs = proj["requisites"]

        text = f"*{title}*\n\n{desc}\n\n*Requisites / –†–µ–∫–≤—ñ–∑–∏—Ç–∏:*\n`{reqs}`"
        await query.edit_message_text(text=text, parse_mode="Markdown")

# === –†–æ–∑—Å–∏–ª–∫–∞ ===
async def broadcast_message(application):
    while True:
        for chat_id in user_ids:
            try:
                message = "‚è∞ Reminder: every 90 minutes!\n‚è∞ –ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è: –∫–æ–∂–Ω—ñ 90 —Ö–≤–∏–ª–∏–Ω!"
                await application.bot.send_message(chat_id=chat_id, text=message)

                photos = [f for f in os.listdir(PHOTO_FOLDER) if f.lower().endswith(('.png', '.jpg', '.jpeg'))]
                if photos:
                    photo_path = os.path.join(PHOTO_FOLDER, random.choice(photos))
                    with open(photo_path, 'rb') as photo:
                        await application.bot.send_photo(chat_id=chat_id, photo=photo)

            except Exception as e:
                print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—ñ –¥–æ {chat_id}: {e}")

        await asyncio.sleep(90 * 60)  # –∫–æ–∂–Ω—ñ 90 —Ö–≤–∏–ª–∏–Ω

# === –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ===
async def on_startup(app):
    asyncio.create_task(broadcast_message(app))

app = ApplicationBuilder().token(TOKEN).post_init(on_startup).build()

# –û—Å–Ω–æ–≤–Ω—ñ –∫–æ–º–∞–Ω–¥–∏
app.add_handler(CommandHandler("start", start))
app.add_handler(CommandHandler("restart", restart))
app.add_handler(CommandHandler("admin", admin))

# –ê–¥–º—ñ–Ω-–∫–æ–º–∞–Ω–¥–∏
app.add_handler(CommandHandler("add_project", add_project))
app.add_handler(CommandHandler("delete_project", delete_project))
app.add_handler(CommandHandler("list_projects", list_projects))

# –û–±—Ä–æ–±–Ω–∏–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
app.add_handler(CallbackQueryHandler(handle_project_selection))

app.run_polling()